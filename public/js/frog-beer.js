// Generated by CoffeeScript 1.9.0
(function() {
  var CANVAS_SIZE, PIXEL_SIZE, activePalette, clearCanvas, drawPixelsOnCanvas, getPixels, highlightActivePaletteColor, newPalette, paintCanvasRow, pixels, pressingDown, saveCanvas, selectColor, updatePalette;

  activePalette = [];

  pressingDown = false;

  pixels = [];

  PIXEL_SIZE = 20;

  CANVAS_SIZE = 400;

  $('.drawing-saved').hide();

  $('#canvas').hide();

  selectColor = function(context) {
    var color;
    color = $(context).css('background-color');
    return highlightActivePaletteColor(context);
  };

  highlightActivePaletteColor = function(context) {
    $('.color').removeClass('active');
    return $(context).addClass('active');
  };

  updatePalette = function() {
    var color, context, index, paletteContext, _i, _len, _results;
    _results = [];
    for (index = _i = 0, _len = activePalette.length; _i < _len; index = ++_i) {
      color = activePalette[index];
      paletteContext = $('.palette-color')[index];
      $(paletteContext).css('background-color', color);
      if (index === 0) {
        context = $('.palette-color')[0];
        _results.push(selectColor(context));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  newPalette = function() {
    var palette, shuffledPalettes, _i, _len, _results;
    shuffledPalettes = _.shuffle(palettes);
    _results = [];
    for (_i = 0, _len = shuffledPalettes.length; _i < _len; _i++) {
      palette = shuffledPalettes[_i];
      if (_.isEqual(activePalette, palette) === false) {
        activePalette = palette;
        updatePalette();
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  $('.color').not('.shuffle').click(function() {
    var context;
    context = this;
    return selectColor(context);
  });

  $(document).keypress(function(key) {
    var context;
    if (key.which === 49) {
      context = $('.color')[0];
      return selectColor(context);
    } else if (key.which === 50) {
      context = $('.color')[1];
      return selectColor(context);
    } else if (key.which === 51) {
      context = $('.color')[2];
      return selectColor(context);
    } else if (key.which === 52) {
      context = $('.color')[3];
      return selectColor(context);
    } else if (key.which === 53) {
      context = $('.color')[4];
      return selectColor(context);
    } else if (key.which === 54) {
      context = $('.color')[5];
      return selectColor(context);
    }
  });

  newPalette();

  $('.shuffle').click(function() {
    return newPalette();
  });

  $('.pixel').mousedown(function() {
    var color;
    color = $('.color.active').css('background-color');
    pressingDown = true;
    return $(this).css("background-color", color);
  });

  $(document).mouseup(function() {
    return pressingDown = false;
  });

  $('.pixel').mousemove(function() {
    var color;
    color = $('.color.active').css('background-color');
    if (pressingDown) {
      return $(this).css("background-color", color);
    }
  });

  getPixels = function() {
    var drawing, pixel, pixelColor, _i, _len, _results;
    drawing = $('.drawing .pixel');
    pixels = [];
    _results = [];
    for (_i = 0, _len = drawing.length; _i < _len; _i++) {
      pixel = drawing[_i];
      pixelColor = $(pixel).css('background-color');
      _results.push(pixels.push(pixelColor));
    }
    return _results;
  };

  paintCanvasRow = function(pixelColor, index, row) {
    var X, Y, canvas, context;
    X = PIXEL_SIZE * index - (CANVAS_SIZE * row);
    Y = PIXEL_SIZE * row;
    canvas = document.getElementById("canvas");
    context = canvas.getContext('2d');
    context.fillStyle = pixelColor;
    return context.fillRect(X, Y, PIXEL_SIZE, PIXEL_SIZE);
  };

  drawPixelsOnCanvas = function(pixels) {
    var index, pixelColor, _i, _len, _results;
    _results = [];
    for (index = _i = 0, _len = pixels.length; _i < _len; index = ++_i) {
      pixelColor = pixels[index];
      if (index < 20) {
        paintCanvasRow(pixelColor, index, 0);
      }
      if (index < 40) {
        paintCanvasRow(pixelColor, index, 1);
      }
      if (index < 60) {
        paintCanvasRow(pixelColor, index, 2);
      }
      if (index < 80) {
        paintCanvasRow(pixelColor, index, 3);
      }
      if (index < 100) {
        paintCanvasRow(pixelColor, index, 4);
      }
      if (index < 120) {
        paintCanvasRow(pixelColor, index, 5);
      }
      if (index < 140) {
        paintCanvasRow(pixelColor, index, 6);
      }
      if (index < 160) {
        paintCanvasRow(pixelColor, index, 7);
      }
      if (index < 180) {
        paintCanvasRow(pixelColor, index, 8);
      }
      if (index < 200) {
        paintCanvasRow(pixelColor, index, 9);
      }
      if (index < 220) {
        paintCanvasRow(pixelColor, index, 10);
      }
      if (index < 240) {
        paintCanvasRow(pixelColor, index, 11);
      }
      if (index < 260) {
        paintCanvasRow(pixelColor, index, 12);
      }
      if (index < 280) {
        paintCanvasRow(pixelColor, index, 13);
      }
      if (index < 300) {
        paintCanvasRow(pixelColor, index, 14);
      }
      if (index < 320) {
        paintCanvasRow(pixelColor, index, 15);
      }
      if (index < 340) {
        paintCanvasRow(pixelColor, index, 16);
      }
      if (index < 360) {
        paintCanvasRow(pixelColor, index, 17);
      }
      if (index < 380) {
        paintCanvasRow(pixelColor, index, 18);
      }
      if (index < 400) {
        _results.push(paintCanvasRow(pixelColor, index, 19));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  saveCanvas = function() {
    var canvas, image;
    canvas = document.getElementById("canvas");
    image = canvas.toDataURL("image/png");
    return $.post('/save-drawing', {
      'image': image,
      'week': 0,
      'artistID': 'yr32saf32'
    }, function(response) {
      console.log(response);
      $('.save-drawing').hide();
      $('.drawing-saved').show();
      $('.palette').hide();
      $('.drawing').hide();
      return $('#canvas').show();
    });
  };

  $('.save-button').click(function() {
    getPixels();
    drawPixelsOnCanvas(pixels);
    return saveCanvas();
  });

  clearCanvas = function() {
    var canvas, context;
    canvas = document.getElementById("canvas");
    context = canvas.getContext('2d');
    context.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);
    return $('.pixel').css('background-color', '');
  };

  $('.draw-another').click(function() {
    clearCanvas();
    $('.save-drawing').show();
    $('.drawing-saved').hide();
    $('.palette').show();
    $('.drawing').show();
    return $('#canvas').hide();
  });

}).call(this);
